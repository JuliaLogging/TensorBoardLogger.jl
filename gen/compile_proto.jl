## Note: this file is supposed to be run from the TensorBoardLogger/gen folder as
## $ cd .../TensorBoardLogger/gen
## $ julia --project=. compile_proto.jl

# The proto folder is generated by the following script
# and then manually cleaning the output from useless stuff
#
# mkdir -p tmp/proto && cd tmp
# git clone --recurse-submodules git@github.com:tensorflow/tensorboard.git
# git clone --recurse-submodules git@github.com:tensorflow/tensorflow.git
# rsync -zarvm --include="*/" --include="*.proto" --exclude="*" tensorboard proto
# rsync -zarvm --include="*/" --include="*.proto" --exclude="*" tensorflow proto

using ProtoBuf
using Glob 
using FilePaths; using FilePathsBase: /

pbpath =dirname(dirname(PosixPath(pathof(ProtoBuf))))/p"gen"

## Setup input and output paths
cur_path = cwd()
TBL_root = dirname(cur_path)

src_dir = cur_path/"proto"
out_dir   = cur_path/"protojl"

## Clean the output directory
rm(out_dir, force=true, recursive=true)

##Â First module
function process_module(cur_module::AbstractString; base_module::AbstractString=cur_module, input_path=cur_module)
    # Include search paths
    includes   = [src_dir, src_dir/base_module]

    # Output folder
    module_out_dir    = out_dir/cur_module

    # Input files
    infiles = glob("*.proto", src_dir/input_path)

    mkpath(module_out_dir)
    includes_str=["--proto_path=$path" for path=includes]
    run(ProtoBuf.protoc(`$includes_str --julia_out=$module_out_dir $infiles`))

    nothing
end

#process_module("tensorflow", input_path="tensorflow/core/protobuf")

process_module("tensorboard", input_path="tensorboard/compat/proto")

#plugins = ["audio", "custom_scalar", "hparams", "histogram", "image", "scalar", "text"]
plugins = ["custom_scalar", "hparams", "text"]
for plugin in plugins
    process_module("tensorboard/plugins/$plugin", base_module="tensorboard")
end


## this fails but would be better
#cur_module  = "tensorboard"
#base_module = cur_module
#
## Include search paths
#includes   = [src_dir, src_dir/base_module]
#
## Output folder
#module_out_dir    = out_dir/("$cur_module"*"2")
#
## Input files
#infiles = glob("*.proto", src_dir/cur_module/"compat/proto")
#
#for plugin in plugins
#    plugin_proto_files = glob("*.proto", src_dir/cur_module/"plugins/$plugin")
#    append!(infiles, plugin_proto_files)
#end
#
#mkpath(module_out_dir)
#includes_str=["--proto_path=$path" for path=includes]
#run(ProtoBuf.protoc(`$includes_str --julia_out=$module_out_dir $infiles`))


# Finally move the output directory to the src folder
mv(out_dir, TBL_root/"src"/"protojl")
