# Autogenerated using ProtoBuf.jl v1.0.11 on 2023-08-09T10:18:18.822
# original file: proto/tensorboard/plugins/hparams/tensorboard/hparams/plugin_data.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export SessionEndInfo, SessionStartInfo, HParamsPluginData

struct SessionEndInfo
    status::Status.T
    end_time_secs::Float64
end
PB.default_values(::Type{SessionEndInfo}) = (;status = Status.STATUS_UNKNOWN, end_time_secs = zero(Float64))
PB.field_numbers(::Type{SessionEndInfo}) = (;status = 1, end_time_secs = 2)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:SessionEndInfo})
    status = Status.STATUS_UNKNOWN
    end_time_secs = zero(Float64)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            status = PB.decode(d, Status.T)
        elseif field_number == 2
            end_time_secs = PB.decode(d, Float64)
        else
            PB.skip(d, wire_type)
        end
    end
    return SessionEndInfo(status, end_time_secs)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::SessionEndInfo)
    initpos = position(e.io)
    x.status != Status.STATUS_UNKNOWN && PB.encode(e, 1, x.status)
    x.end_time_secs != zero(Float64) && PB.encode(e, 2, x.end_time_secs)
    return position(e.io) - initpos
end
function PB._encoded_size(x::SessionEndInfo)
    encoded_size = 0
    x.status != Status.STATUS_UNKNOWN && (encoded_size += PB._encoded_size(x.status, 1))
    x.end_time_secs != zero(Float64) && (encoded_size += PB._encoded_size(x.end_time_secs, 2))
    return encoded_size
end

struct SessionStartInfo
    hparams::Dict{String,google.protobuf.Value}
    model_uri::String
    monitor_url::String
    group_name::String
    start_time_secs::Float64
end
PB.default_values(::Type{SessionStartInfo}) = (;hparams = Dict{String,google.protobuf.Value}(), model_uri = "", monitor_url = "", group_name = "", start_time_secs = zero(Float64))
PB.field_numbers(::Type{SessionStartInfo}) = (;hparams = 1, model_uri = 2, monitor_url = 3, group_name = 4, start_time_secs = 5)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:SessionStartInfo})
    hparams = Dict{String,google.protobuf.Value}()
    model_uri = ""
    monitor_url = ""
    group_name = ""
    start_time_secs = zero(Float64)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, hparams)
        elseif field_number == 2
            model_uri = PB.decode(d, String)
        elseif field_number == 3
            monitor_url = PB.decode(d, String)
        elseif field_number == 4
            group_name = PB.decode(d, String)
        elseif field_number == 5
            start_time_secs = PB.decode(d, Float64)
        else
            PB.skip(d, wire_type)
        end
    end
    return SessionStartInfo(hparams, model_uri, monitor_url, group_name, start_time_secs)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::SessionStartInfo)
    initpos = position(e.io)
    !isempty(x.hparams) && PB.encode(e, 1, x.hparams)
    !isempty(x.model_uri) && PB.encode(e, 2, x.model_uri)
    !isempty(x.monitor_url) && PB.encode(e, 3, x.monitor_url)
    !isempty(x.group_name) && PB.encode(e, 4, x.group_name)
    x.start_time_secs != zero(Float64) && PB.encode(e, 5, x.start_time_secs)
    return position(e.io) - initpos
end
function PB._encoded_size(x::SessionStartInfo)
    encoded_size = 0
    !isempty(x.hparams) && (encoded_size += PB._encoded_size(x.hparams, 1))
    !isempty(x.model_uri) && (encoded_size += PB._encoded_size(x.model_uri, 2))
    !isempty(x.monitor_url) && (encoded_size += PB._encoded_size(x.monitor_url, 3))
    !isempty(x.group_name) && (encoded_size += PB._encoded_size(x.group_name, 4))
    x.start_time_secs != zero(Float64) && (encoded_size += PB._encoded_size(x.start_time_secs, 5))
    return encoded_size
end

struct HParamsPluginData
    version::Int32
    data::Union{Nothing,OneOf{<:Union{Experiment,SessionStartInfo,SessionEndInfo}}}
end
PB.oneof_field_types(::Type{HParamsPluginData}) = (;
    data = (;experiment=Experiment, session_start_info=SessionStartInfo, session_end_info=SessionEndInfo),
)
PB.default_values(::Type{HParamsPluginData}) = (;version = zero(Int32), experiment = nothing, session_start_info = nothing, session_end_info = nothing)
PB.field_numbers(::Type{HParamsPluginData}) = (;version = 1, experiment = 2, session_start_info = 3, session_end_info = 4)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:HParamsPluginData})
    version = zero(Int32)
    data = nothing
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            version = PB.decode(d, Int32)
        elseif field_number == 2
            data = OneOf(:experiment, PB.decode(d, Ref{Experiment}))
        elseif field_number == 3
            data = OneOf(:session_start_info, PB.decode(d, Ref{SessionStartInfo}))
        elseif field_number == 4
            data = OneOf(:session_end_info, PB.decode(d, Ref{SessionEndInfo}))
        else
            PB.skip(d, wire_type)
        end
    end
    return HParamsPluginData(version, data)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::HParamsPluginData)
    initpos = position(e.io)
    x.version != zero(Int32) && PB.encode(e, 1, x.version)
    if isnothing(x.data);
    elseif x.data.name === :experiment
        PB.encode(e, 2, x.data[]::Experiment)
    elseif x.data.name === :session_start_info
        PB.encode(e, 3, x.data[]::SessionStartInfo)
    elseif x.data.name === :session_end_info
        PB.encode(e, 4, x.data[]::SessionEndInfo)
    end
    return position(e.io) - initpos
end
function PB._encoded_size(x::HParamsPluginData)
    encoded_size = 0
    x.version != zero(Int32) && (encoded_size += PB._encoded_size(x.version, 1))
    if isnothing(x.data);
    elseif x.data.name === :experiment
        encoded_size += PB._encoded_size(x.data[]::Experiment, 2)
    elseif x.data.name === :session_start_info
        encoded_size += PB._encoded_size(x.data[]::SessionStartInfo, 3)
    elseif x.data.name === :session_end_info
        encoded_size += PB._encoded_size(x.data[]::SessionEndInfo, 4)
    end
    return encoded_size
end