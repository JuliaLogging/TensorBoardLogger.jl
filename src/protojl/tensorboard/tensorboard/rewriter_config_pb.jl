# Autogenerated using ProtoBuf.jl v1.0.11 on 2023-08-09T10:18:18.631
# original file: proto/tensorboard/tensorboard/rewriter_config.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export var"RewriterConfig.CustomGraphOptimizer", ScopedAllocatorOptions
export var"RewriterConfig.CpuLayout", var"RewriterConfig.Toggle"
export var"RewriterConfig.NumIterationsType", var"RewriterConfig.MemOptType"
export AutoParallelOptions, RewriterConfig

struct var"RewriterConfig.CustomGraphOptimizer"
    name::String
    parameter_map::Dict{String,AttrValue}
end
PB.default_values(::Type{var"RewriterConfig.CustomGraphOptimizer"}) = (;name = "", parameter_map = Dict{String,AttrValue}())
PB.field_numbers(::Type{var"RewriterConfig.CustomGraphOptimizer"}) = (;name = 1, parameter_map = 2)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:var"RewriterConfig.CustomGraphOptimizer"})
    name = ""
    parameter_map = Dict{String,AttrValue}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            name = PB.decode(d, String)
        elseif field_number == 2
            PB.decode!(d, parameter_map)
        else
            PB.skip(d, wire_type)
        end
    end
    return var"RewriterConfig.CustomGraphOptimizer"(name, parameter_map)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::var"RewriterConfig.CustomGraphOptimizer")
    initpos = position(e.io)
    !isempty(x.name) && PB.encode(e, 1, x.name)
    !isempty(x.parameter_map) && PB.encode(e, 2, x.parameter_map)
    return position(e.io) - initpos
end
function PB._encoded_size(x::var"RewriterConfig.CustomGraphOptimizer")
    encoded_size = 0
    !isempty(x.name) && (encoded_size += PB._encoded_size(x.name, 1))
    !isempty(x.parameter_map) && (encoded_size += PB._encoded_size(x.parameter_map, 2))
    return encoded_size
end

struct ScopedAllocatorOptions
    enable_op::Vector{String}
end
PB.default_values(::Type{ScopedAllocatorOptions}) = (;enable_op = Vector{String}())
PB.field_numbers(::Type{ScopedAllocatorOptions}) = (;enable_op = 1)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:ScopedAllocatorOptions})
    enable_op = PB.BufferedVector{String}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, enable_op)
        else
            PB.skip(d, wire_type)
        end
    end
    return ScopedAllocatorOptions(enable_op[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::ScopedAllocatorOptions)
    initpos = position(e.io)
    !isempty(x.enable_op) && PB.encode(e, 1, x.enable_op)
    return position(e.io) - initpos
end
function PB._encoded_size(x::ScopedAllocatorOptions)
    encoded_size = 0
    !isempty(x.enable_op) && (encoded_size += PB._encoded_size(x.enable_op, 1))
    return encoded_size
end

@enumx var"RewriterConfig.CpuLayout" NO_CONVERSION_ON_CPU=0 NCHW_TO_NHWC=1 NHWC_TO_NCHW=2

@enumx var"RewriterConfig.Toggle" DEFAULT=0 ON=1 OFF=2 AGGRESSIVE=3 EXPERIMENTAL_MLIR=4 EXPERIMENTAL_BOTH=5

@enumx var"RewriterConfig.NumIterationsType" DEFAULT_NUM_ITERS=0 ONE=1 TWO=2

@enumx var"RewriterConfig.MemOptType" DEFAULT_MEM_OPT=0 NO_MEM_OPT=1 MANUAL=2 SWAPPING_HEURISTICS=4 RECOMPUTATION_HEURISTICS=5 SCHEDULING_HEURISTICS=6 HEURISTICS=3

struct AutoParallelOptions
    enable::Bool
    num_replicas::Int32
end
PB.default_values(::Type{AutoParallelOptions}) = (;enable = false, num_replicas = zero(Int32))
PB.field_numbers(::Type{AutoParallelOptions}) = (;enable = 1, num_replicas = 2)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:AutoParallelOptions})
    enable = false
    num_replicas = zero(Int32)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            enable = PB.decode(d, Bool)
        elseif field_number == 2
            num_replicas = PB.decode(d, Int32)
        else
            PB.skip(d, wire_type)
        end
    end
    return AutoParallelOptions(enable, num_replicas)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::AutoParallelOptions)
    initpos = position(e.io)
    x.enable != false && PB.encode(e, 1, x.enable)
    x.num_replicas != zero(Int32) && PB.encode(e, 2, x.num_replicas)
    return position(e.io) - initpos
end
function PB._encoded_size(x::AutoParallelOptions)
    encoded_size = 0
    x.enable != false && (encoded_size += PB._encoded_size(x.enable, 1))
    x.num_replicas != zero(Int32) && (encoded_size += PB._encoded_size(x.num_replicas, 2))
    return encoded_size
end

struct RewriterConfig
    cpu_layout_conversion::var"RewriterConfig.CpuLayout".T
    layout_optimizer::var"RewriterConfig.Toggle".T
    constant_folding::var"RewriterConfig.Toggle".T
    shape_optimization::var"RewriterConfig.Toggle".T
    remapping::var"RewriterConfig.Toggle".T
    common_subgraph_elimination::var"RewriterConfig.Toggle".T
    arithmetic_optimization::var"RewriterConfig.Toggle".T
    dependency_optimization::var"RewriterConfig.Toggle".T
    loop_optimization::var"RewriterConfig.Toggle".T
    function_optimization::var"RewriterConfig.Toggle".T
    debug_stripper::var"RewriterConfig.Toggle".T
    disable_model_pruning::Bool
    scoped_allocator_optimization::var"RewriterConfig.Toggle".T
    pin_to_host_optimization::var"RewriterConfig.Toggle".T
    implementation_selector::var"RewriterConfig.Toggle".T
    auto_mixed_precision::var"RewriterConfig.Toggle".T
    auto_mixed_precision_mkl::var"RewriterConfig.Toggle".T
    auto_mixed_precision_onednn_bfloat16::var"RewriterConfig.Toggle".T
    auto_mixed_precision_cpu::var"RewriterConfig.Toggle".T
    disable_meta_optimizer::Bool
    use_plugin_optimizers::var"RewriterConfig.Toggle".T
    experimental_conditional_code_motion::var"RewriterConfig.Toggle".T
    meta_optimizer_iterations::var"RewriterConfig.NumIterationsType".T
    min_graph_nodes::Int32
    experimental_disable_compressed_tensor_optimization::Bool
    experimental_disable_folding_quantization_emulation::Bool
    memory_optimization::var"RewriterConfig.MemOptType".T
    memory_optimizer_target_node_name_scope::String
    meta_optimizer_timeout_ms::Int64
    auto_parallel::Union{Nothing,AutoParallelOptions}
    fail_on_optimizer_errors::Bool
    scoped_allocator_opts::Union{Nothing,ScopedAllocatorOptions}
    optimizers::Vector{String}
    custom_optimizers::Vector{var"RewriterConfig.CustomGraphOptimizer"}
    inter_optimizer_verifier_config::Union{Nothing,VerifierConfig}
    post_optimization_verifier_config::Union{Nothing,VerifierConfig}
end
PB.default_values(::Type{RewriterConfig}) = (;cpu_layout_conversion = var"RewriterConfig.CpuLayout".NO_CONVERSION_ON_CPU, layout_optimizer = var"RewriterConfig.Toggle".DEFAULT, constant_folding = var"RewriterConfig.Toggle".DEFAULT, shape_optimization = var"RewriterConfig.Toggle".DEFAULT, remapping = var"RewriterConfig.Toggle".DEFAULT, common_subgraph_elimination = var"RewriterConfig.Toggle".DEFAULT, arithmetic_optimization = var"RewriterConfig.Toggle".DEFAULT, dependency_optimization = var"RewriterConfig.Toggle".DEFAULT, loop_optimization = var"RewriterConfig.Toggle".DEFAULT, function_optimization = var"RewriterConfig.Toggle".DEFAULT, debug_stripper = var"RewriterConfig.Toggle".DEFAULT, disable_model_pruning = false, scoped_allocator_optimization = var"RewriterConfig.Toggle".DEFAULT, pin_to_host_optimization = var"RewriterConfig.Toggle".DEFAULT, implementation_selector = var"RewriterConfig.Toggle".DEFAULT, auto_mixed_precision = var"RewriterConfig.Toggle".DEFAULT, auto_mixed_precision_mkl = var"RewriterConfig.Toggle".DEFAULT, auto_mixed_precision_onednn_bfloat16 = var"RewriterConfig.Toggle".DEFAULT, auto_mixed_precision_cpu = var"RewriterConfig.Toggle".DEFAULT, disable_meta_optimizer = false, use_plugin_optimizers = var"RewriterConfig.Toggle".DEFAULT, experimental_conditional_code_motion = var"RewriterConfig.Toggle".DEFAULT, meta_optimizer_iterations = var"RewriterConfig.NumIterationsType".DEFAULT_NUM_ITERS, min_graph_nodes = zero(Int32), experimental_disable_compressed_tensor_optimization = false, experimental_disable_folding_quantization_emulation = false, memory_optimization = var"RewriterConfig.MemOptType".DEFAULT_MEM_OPT, memory_optimizer_target_node_name_scope = "", meta_optimizer_timeout_ms = zero(Int64), auto_parallel = nothing, fail_on_optimizer_errors = false, scoped_allocator_opts = nothing, optimizers = Vector{String}(), custom_optimizers = Vector{var"RewriterConfig.CustomGraphOptimizer"}(), inter_optimizer_verifier_config = nothing, post_optimization_verifier_config = nothing)
PB.field_numbers(::Type{RewriterConfig}) = (;cpu_layout_conversion = 50, layout_optimizer = 1, constant_folding = 3, shape_optimization = 13, remapping = 14, common_subgraph_elimination = 24, arithmetic_optimization = 7, dependency_optimization = 8, loop_optimization = 9, function_optimization = 10, debug_stripper = 11, disable_model_pruning = 2, scoped_allocator_optimization = 15, pin_to_host_optimization = 18, implementation_selector = 22, auto_mixed_precision = 23, auto_mixed_precision_mkl = 25, auto_mixed_precision_onednn_bfloat16 = 31, auto_mixed_precision_cpu = 29, disable_meta_optimizer = 19, use_plugin_optimizers = 28, experimental_conditional_code_motion = 30, meta_optimizer_iterations = 12, min_graph_nodes = 17, experimental_disable_compressed_tensor_optimization = 26, experimental_disable_folding_quantization_emulation = 27, memory_optimization = 4, memory_optimizer_target_node_name_scope = 6, meta_optimizer_timeout_ms = 20, auto_parallel = 5, fail_on_optimizer_errors = 21, scoped_allocator_opts = 16, optimizers = 100, custom_optimizers = 200, inter_optimizer_verifier_config = 300, post_optimization_verifier_config = 301)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:RewriterConfig})
    cpu_layout_conversion = var"RewriterConfig.CpuLayout".NO_CONVERSION_ON_CPU
    layout_optimizer = var"RewriterConfig.Toggle".DEFAULT
    constant_folding = var"RewriterConfig.Toggle".DEFAULT
    shape_optimization = var"RewriterConfig.Toggle".DEFAULT
    remapping = var"RewriterConfig.Toggle".DEFAULT
    common_subgraph_elimination = var"RewriterConfig.Toggle".DEFAULT
    arithmetic_optimization = var"RewriterConfig.Toggle".DEFAULT
    dependency_optimization = var"RewriterConfig.Toggle".DEFAULT
    loop_optimization = var"RewriterConfig.Toggle".DEFAULT
    function_optimization = var"RewriterConfig.Toggle".DEFAULT
    debug_stripper = var"RewriterConfig.Toggle".DEFAULT
    disable_model_pruning = false
    scoped_allocator_optimization = var"RewriterConfig.Toggle".DEFAULT
    pin_to_host_optimization = var"RewriterConfig.Toggle".DEFAULT
    implementation_selector = var"RewriterConfig.Toggle".DEFAULT
    auto_mixed_precision = var"RewriterConfig.Toggle".DEFAULT
    auto_mixed_precision_mkl = var"RewriterConfig.Toggle".DEFAULT
    auto_mixed_precision_onednn_bfloat16 = var"RewriterConfig.Toggle".DEFAULT
    auto_mixed_precision_cpu = var"RewriterConfig.Toggle".DEFAULT
    disable_meta_optimizer = false
    use_plugin_optimizers = var"RewriterConfig.Toggle".DEFAULT
    experimental_conditional_code_motion = var"RewriterConfig.Toggle".DEFAULT
    meta_optimizer_iterations = var"RewriterConfig.NumIterationsType".DEFAULT_NUM_ITERS
    min_graph_nodes = zero(Int32)
    experimental_disable_compressed_tensor_optimization = false
    experimental_disable_folding_quantization_emulation = false
    memory_optimization = var"RewriterConfig.MemOptType".DEFAULT_MEM_OPT
    memory_optimizer_target_node_name_scope = ""
    meta_optimizer_timeout_ms = zero(Int64)
    auto_parallel = Ref{Union{Nothing,AutoParallelOptions}}(nothing)
    fail_on_optimizer_errors = false
    scoped_allocator_opts = Ref{Union{Nothing,ScopedAllocatorOptions}}(nothing)
    optimizers = PB.BufferedVector{String}()
    custom_optimizers = PB.BufferedVector{var"RewriterConfig.CustomGraphOptimizer"}()
    inter_optimizer_verifier_config = Ref{Union{Nothing,VerifierConfig}}(nothing)
    post_optimization_verifier_config = Ref{Union{Nothing,VerifierConfig}}(nothing)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 50
            cpu_layout_conversion = PB.decode(d, var"RewriterConfig.CpuLayout".T)
        elseif field_number == 1
            layout_optimizer = PB.decode(d, var"RewriterConfig.Toggle".T)
        elseif field_number == 3
            constant_folding = PB.decode(d, var"RewriterConfig.Toggle".T)
        elseif field_number == 13
            shape_optimization = PB.decode(d, var"RewriterConfig.Toggle".T)
        elseif field_number == 14
            remapping = PB.decode(d, var"RewriterConfig.Toggle".T)
        elseif field_number == 24
            common_subgraph_elimination = PB.decode(d, var"RewriterConfig.Toggle".T)
        elseif field_number == 7
            arithmetic_optimization = PB.decode(d, var"RewriterConfig.Toggle".T)
        elseif field_number == 8
            dependency_optimization = PB.decode(d, var"RewriterConfig.Toggle".T)
        elseif field_number == 9
            loop_optimization = PB.decode(d, var"RewriterConfig.Toggle".T)
        elseif field_number == 10
            function_optimization = PB.decode(d, var"RewriterConfig.Toggle".T)
        elseif field_number == 11
            debug_stripper = PB.decode(d, var"RewriterConfig.Toggle".T)
        elseif field_number == 2
            disable_model_pruning = PB.decode(d, Bool)
        elseif field_number == 15
            scoped_allocator_optimization = PB.decode(d, var"RewriterConfig.Toggle".T)
        elseif field_number == 18
            pin_to_host_optimization = PB.decode(d, var"RewriterConfig.Toggle".T)
        elseif field_number == 22
            implementation_selector = PB.decode(d, var"RewriterConfig.Toggle".T)
        elseif field_number == 23
            auto_mixed_precision = PB.decode(d, var"RewriterConfig.Toggle".T)
        elseif field_number == 25
            auto_mixed_precision_mkl = PB.decode(d, var"RewriterConfig.Toggle".T)
        elseif field_number == 31
            auto_mixed_precision_onednn_bfloat16 = PB.decode(d, var"RewriterConfig.Toggle".T)
        elseif field_number == 29
            auto_mixed_precision_cpu = PB.decode(d, var"RewriterConfig.Toggle".T)
        elseif field_number == 19
            disable_meta_optimizer = PB.decode(d, Bool)
        elseif field_number == 28
            use_plugin_optimizers = PB.decode(d, var"RewriterConfig.Toggle".T)
        elseif field_number == 30
            experimental_conditional_code_motion = PB.decode(d, var"RewriterConfig.Toggle".T)
        elseif field_number == 12
            meta_optimizer_iterations = PB.decode(d, var"RewriterConfig.NumIterationsType".T)
        elseif field_number == 17
            min_graph_nodes = PB.decode(d, Int32)
        elseif field_number == 26
            experimental_disable_compressed_tensor_optimization = PB.decode(d, Bool)
        elseif field_number == 27
            experimental_disable_folding_quantization_emulation = PB.decode(d, Bool)
        elseif field_number == 4
            memory_optimization = PB.decode(d, var"RewriterConfig.MemOptType".T)
        elseif field_number == 6
            memory_optimizer_target_node_name_scope = PB.decode(d, String)
        elseif field_number == 20
            meta_optimizer_timeout_ms = PB.decode(d, Int64)
        elseif field_number == 5
            PB.decode!(d, auto_parallel)
        elseif field_number == 21
            fail_on_optimizer_errors = PB.decode(d, Bool)
        elseif field_number == 16
            PB.decode!(d, scoped_allocator_opts)
        elseif field_number == 100
            PB.decode!(d, optimizers)
        elseif field_number == 200
            PB.decode!(d, custom_optimizers)
        elseif field_number == 300
            PB.decode!(d, inter_optimizer_verifier_config)
        elseif field_number == 301
            PB.decode!(d, post_optimization_verifier_config)
        else
            PB.skip(d, wire_type)
        end
    end
    return RewriterConfig(cpu_layout_conversion, layout_optimizer, constant_folding, shape_optimization, remapping, common_subgraph_elimination, arithmetic_optimization, dependency_optimization, loop_optimization, function_optimization, debug_stripper, disable_model_pruning, scoped_allocator_optimization, pin_to_host_optimization, implementation_selector, auto_mixed_precision, auto_mixed_precision_mkl, auto_mixed_precision_onednn_bfloat16, auto_mixed_precision_cpu, disable_meta_optimizer, use_plugin_optimizers, experimental_conditional_code_motion, meta_optimizer_iterations, min_graph_nodes, experimental_disable_compressed_tensor_optimization, experimental_disable_folding_quantization_emulation, memory_optimization, memory_optimizer_target_node_name_scope, meta_optimizer_timeout_ms, auto_parallel[], fail_on_optimizer_errors, scoped_allocator_opts[], optimizers[], custom_optimizers[], inter_optimizer_verifier_config[], post_optimization_verifier_config[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::RewriterConfig)
    initpos = position(e.io)
    x.cpu_layout_conversion != var"RewriterConfig.CpuLayout".NO_CONVERSION_ON_CPU && PB.encode(e, 50, x.cpu_layout_conversion)
    x.layout_optimizer != var"RewriterConfig.Toggle".DEFAULT && PB.encode(e, 1, x.layout_optimizer)
    x.constant_folding != var"RewriterConfig.Toggle".DEFAULT && PB.encode(e, 3, x.constant_folding)
    x.shape_optimization != var"RewriterConfig.Toggle".DEFAULT && PB.encode(e, 13, x.shape_optimization)
    x.remapping != var"RewriterConfig.Toggle".DEFAULT && PB.encode(e, 14, x.remapping)
    x.common_subgraph_elimination != var"RewriterConfig.Toggle".DEFAULT && PB.encode(e, 24, x.common_subgraph_elimination)
    x.arithmetic_optimization != var"RewriterConfig.Toggle".DEFAULT && PB.encode(e, 7, x.arithmetic_optimization)
    x.dependency_optimization != var"RewriterConfig.Toggle".DEFAULT && PB.encode(e, 8, x.dependency_optimization)
    x.loop_optimization != var"RewriterConfig.Toggle".DEFAULT && PB.encode(e, 9, x.loop_optimization)
    x.function_optimization != var"RewriterConfig.Toggle".DEFAULT && PB.encode(e, 10, x.function_optimization)
    x.debug_stripper != var"RewriterConfig.Toggle".DEFAULT && PB.encode(e, 11, x.debug_stripper)
    x.disable_model_pruning != false && PB.encode(e, 2, x.disable_model_pruning)
    x.scoped_allocator_optimization != var"RewriterConfig.Toggle".DEFAULT && PB.encode(e, 15, x.scoped_allocator_optimization)
    x.pin_to_host_optimization != var"RewriterConfig.Toggle".DEFAULT && PB.encode(e, 18, x.pin_to_host_optimization)
    x.implementation_selector != var"RewriterConfig.Toggle".DEFAULT && PB.encode(e, 22, x.implementation_selector)
    x.auto_mixed_precision != var"RewriterConfig.Toggle".DEFAULT && PB.encode(e, 23, x.auto_mixed_precision)
    x.auto_mixed_precision_mkl != var"RewriterConfig.Toggle".DEFAULT && PB.encode(e, 25, x.auto_mixed_precision_mkl)
    x.auto_mixed_precision_onednn_bfloat16 != var"RewriterConfig.Toggle".DEFAULT && PB.encode(e, 31, x.auto_mixed_precision_onednn_bfloat16)
    x.auto_mixed_precision_cpu != var"RewriterConfig.Toggle".DEFAULT && PB.encode(e, 29, x.auto_mixed_precision_cpu)
    x.disable_meta_optimizer != false && PB.encode(e, 19, x.disable_meta_optimizer)
    x.use_plugin_optimizers != var"RewriterConfig.Toggle".DEFAULT && PB.encode(e, 28, x.use_plugin_optimizers)
    x.experimental_conditional_code_motion != var"RewriterConfig.Toggle".DEFAULT && PB.encode(e, 30, x.experimental_conditional_code_motion)
    x.meta_optimizer_iterations != var"RewriterConfig.NumIterationsType".DEFAULT_NUM_ITERS && PB.encode(e, 12, x.meta_optimizer_iterations)
    x.min_graph_nodes != zero(Int32) && PB.encode(e, 17, x.min_graph_nodes)
    x.experimental_disable_compressed_tensor_optimization != false && PB.encode(e, 26, x.experimental_disable_compressed_tensor_optimization)
    x.experimental_disable_folding_quantization_emulation != false && PB.encode(e, 27, x.experimental_disable_folding_quantization_emulation)
    x.memory_optimization != var"RewriterConfig.MemOptType".DEFAULT_MEM_OPT && PB.encode(e, 4, x.memory_optimization)
    !isempty(x.memory_optimizer_target_node_name_scope) && PB.encode(e, 6, x.memory_optimizer_target_node_name_scope)
    x.meta_optimizer_timeout_ms != zero(Int64) && PB.encode(e, 20, x.meta_optimizer_timeout_ms)
    !isnothing(x.auto_parallel) && PB.encode(e, 5, x.auto_parallel)
    x.fail_on_optimizer_errors != false && PB.encode(e, 21, x.fail_on_optimizer_errors)
    !isnothing(x.scoped_allocator_opts) && PB.encode(e, 16, x.scoped_allocator_opts)
    !isempty(x.optimizers) && PB.encode(e, 100, x.optimizers)
    !isempty(x.custom_optimizers) && PB.encode(e, 200, x.custom_optimizers)
    !isnothing(x.inter_optimizer_verifier_config) && PB.encode(e, 300, x.inter_optimizer_verifier_config)
    !isnothing(x.post_optimization_verifier_config) && PB.encode(e, 301, x.post_optimization_verifier_config)
    return position(e.io) - initpos
end
function PB._encoded_size(x::RewriterConfig)
    encoded_size = 0
    x.cpu_layout_conversion != var"RewriterConfig.CpuLayout".NO_CONVERSION_ON_CPU && (encoded_size += PB._encoded_size(x.cpu_layout_conversion, 50))
    x.layout_optimizer != var"RewriterConfig.Toggle".DEFAULT && (encoded_size += PB._encoded_size(x.layout_optimizer, 1))
    x.constant_folding != var"RewriterConfig.Toggle".DEFAULT && (encoded_size += PB._encoded_size(x.constant_folding, 3))
    x.shape_optimization != var"RewriterConfig.Toggle".DEFAULT && (encoded_size += PB._encoded_size(x.shape_optimization, 13))
    x.remapping != var"RewriterConfig.Toggle".DEFAULT && (encoded_size += PB._encoded_size(x.remapping, 14))
    x.common_subgraph_elimination != var"RewriterConfig.Toggle".DEFAULT && (encoded_size += PB._encoded_size(x.common_subgraph_elimination, 24))
    x.arithmetic_optimization != var"RewriterConfig.Toggle".DEFAULT && (encoded_size += PB._encoded_size(x.arithmetic_optimization, 7))
    x.dependency_optimization != var"RewriterConfig.Toggle".DEFAULT && (encoded_size += PB._encoded_size(x.dependency_optimization, 8))
    x.loop_optimization != var"RewriterConfig.Toggle".DEFAULT && (encoded_size += PB._encoded_size(x.loop_optimization, 9))
    x.function_optimization != var"RewriterConfig.Toggle".DEFAULT && (encoded_size += PB._encoded_size(x.function_optimization, 10))
    x.debug_stripper != var"RewriterConfig.Toggle".DEFAULT && (encoded_size += PB._encoded_size(x.debug_stripper, 11))
    x.disable_model_pruning != false && (encoded_size += PB._encoded_size(x.disable_model_pruning, 2))
    x.scoped_allocator_optimization != var"RewriterConfig.Toggle".DEFAULT && (encoded_size += PB._encoded_size(x.scoped_allocator_optimization, 15))
    x.pin_to_host_optimization != var"RewriterConfig.Toggle".DEFAULT && (encoded_size += PB._encoded_size(x.pin_to_host_optimization, 18))
    x.implementation_selector != var"RewriterConfig.Toggle".DEFAULT && (encoded_size += PB._encoded_size(x.implementation_selector, 22))
    x.auto_mixed_precision != var"RewriterConfig.Toggle".DEFAULT && (encoded_size += PB._encoded_size(x.auto_mixed_precision, 23))
    x.auto_mixed_precision_mkl != var"RewriterConfig.Toggle".DEFAULT && (encoded_size += PB._encoded_size(x.auto_mixed_precision_mkl, 25))
    x.auto_mixed_precision_onednn_bfloat16 != var"RewriterConfig.Toggle".DEFAULT && (encoded_size += PB._encoded_size(x.auto_mixed_precision_onednn_bfloat16, 31))
    x.auto_mixed_precision_cpu != var"RewriterConfig.Toggle".DEFAULT && (encoded_size += PB._encoded_size(x.auto_mixed_precision_cpu, 29))
    x.disable_meta_optimizer != false && (encoded_size += PB._encoded_size(x.disable_meta_optimizer, 19))
    x.use_plugin_optimizers != var"RewriterConfig.Toggle".DEFAULT && (encoded_size += PB._encoded_size(x.use_plugin_optimizers, 28))
    x.experimental_conditional_code_motion != var"RewriterConfig.Toggle".DEFAULT && (encoded_size += PB._encoded_size(x.experimental_conditional_code_motion, 30))
    x.meta_optimizer_iterations != var"RewriterConfig.NumIterationsType".DEFAULT_NUM_ITERS && (encoded_size += PB._encoded_size(x.meta_optimizer_iterations, 12))
    x.min_graph_nodes != zero(Int32) && (encoded_size += PB._encoded_size(x.min_graph_nodes, 17))
    x.experimental_disable_compressed_tensor_optimization != false && (encoded_size += PB._encoded_size(x.experimental_disable_compressed_tensor_optimization, 26))
    x.experimental_disable_folding_quantization_emulation != false && (encoded_size += PB._encoded_size(x.experimental_disable_folding_quantization_emulation, 27))
    x.memory_optimization != var"RewriterConfig.MemOptType".DEFAULT_MEM_OPT && (encoded_size += PB._encoded_size(x.memory_optimization, 4))
    !isempty(x.memory_optimizer_target_node_name_scope) && (encoded_size += PB._encoded_size(x.memory_optimizer_target_node_name_scope, 6))
    x.meta_optimizer_timeout_ms != zero(Int64) && (encoded_size += PB._encoded_size(x.meta_optimizer_timeout_ms, 20))
    !isnothing(x.auto_parallel) && (encoded_size += PB._encoded_size(x.auto_parallel, 5))
    x.fail_on_optimizer_errors != false && (encoded_size += PB._encoded_size(x.fail_on_optimizer_errors, 21))
    !isnothing(x.scoped_allocator_opts) && (encoded_size += PB._encoded_size(x.scoped_allocator_opts, 16))
    !isempty(x.optimizers) && (encoded_size += PB._encoded_size(x.optimizers, 100))
    !isempty(x.custom_optimizers) && (encoded_size += PB._encoded_size(x.custom_optimizers, 200))
    !isnothing(x.inter_optimizer_verifier_config) && (encoded_size += PB._encoded_size(x.inter_optimizer_verifier_config, 300))
    !isnothing(x.post_optimization_verifier_config) && (encoded_size += PB._encoded_size(x.post_optimization_verifier_config, 301))
    return encoded_size
end