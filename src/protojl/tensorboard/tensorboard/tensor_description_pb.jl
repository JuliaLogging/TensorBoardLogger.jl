# Autogenerated using ProtoBuf.jl v1.0.11 on 2023-08-09T10:18:18.381
# original file: proto/tensorboard/tensorboard/tensor_description.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export TensorDescription

struct TensorDescription
    dtype::var"#DataType".T
    shape::Union{Nothing,TensorShapeProto}
    allocation_description::Union{Nothing,AllocationDescription}
end
PB.default_values(::Type{TensorDescription}) = (;dtype = var"#DataType".DT_INVALID, shape = nothing, allocation_description = nothing)
PB.field_numbers(::Type{TensorDescription}) = (;dtype = 1, shape = 2, allocation_description = 4)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:TensorDescription})
    dtype = var"#DataType".DT_INVALID
    shape = Ref{Union{Nothing,TensorShapeProto}}(nothing)
    allocation_description = Ref{Union{Nothing,AllocationDescription}}(nothing)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            dtype = PB.decode(d, var"#DataType".T)
        elseif field_number == 2
            PB.decode!(d, shape)
        elseif field_number == 4
            PB.decode!(d, allocation_description)
        else
            PB.skip(d, wire_type)
        end
    end
    return TensorDescription(dtype, shape[], allocation_description[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::TensorDescription)
    initpos = position(e.io)
    x.dtype != var"#DataType".DT_INVALID && PB.encode(e, 1, x.dtype)
    !isnothing(x.shape) && PB.encode(e, 2, x.shape)
    !isnothing(x.allocation_description) && PB.encode(e, 4, x.allocation_description)
    return position(e.io) - initpos
end
function PB._encoded_size(x::TensorDescription)
    encoded_size = 0
    x.dtype != var"#DataType".DT_INVALID && (encoded_size += PB._encoded_size(x.dtype, 1))
    !isnothing(x.shape) && (encoded_size += PB._encoded_size(x.shape, 2))
    !isnothing(x.allocation_description) && (encoded_size += PB._encoded_size(x.allocation_description, 4))
    return encoded_size
end