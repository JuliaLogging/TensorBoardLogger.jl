# Autogenerated using ProtoBuf.jl v1.0.11 on 2023-08-09T10:18:18.381
# original file: proto/tensorboard/tensorboard/cluster.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export JobDef, ClusterDef

struct JobDef
    name::String
    tasks::Dict{Int32,String}
end
PB.default_values(::Type{JobDef}) = (;name = "", tasks = Dict{Int32,String}())
PB.field_numbers(::Type{JobDef}) = (;name = 1, tasks = 2)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:JobDef})
    name = ""
    tasks = Dict{Int32,String}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            name = PB.decode(d, String)
        elseif field_number == 2
            PB.decode!(d, tasks)
        else
            PB.skip(d, wire_type)
        end
    end
    return JobDef(name, tasks)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::JobDef)
    initpos = position(e.io)
    !isempty(x.name) && PB.encode(e, 1, x.name)
    !isempty(x.tasks) && PB.encode(e, 2, x.tasks)
    return position(e.io) - initpos
end
function PB._encoded_size(x::JobDef)
    encoded_size = 0
    !isempty(x.name) && (encoded_size += PB._encoded_size(x.name, 1))
    !isempty(x.tasks) && (encoded_size += PB._encoded_size(x.tasks, 2))
    return encoded_size
end

struct ClusterDef
    job::Vector{JobDef}
end
PB.default_values(::Type{ClusterDef}) = (;job = Vector{JobDef}())
PB.field_numbers(::Type{ClusterDef}) = (;job = 1)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:ClusterDef})
    job = PB.BufferedVector{JobDef}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, job)
        else
            PB.skip(d, wire_type)
        end
    end
    return ClusterDef(job[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::ClusterDef)
    initpos = position(e.io)
    !isempty(x.job) && PB.encode(e, 1, x.job)
    return position(e.io) - initpos
end
function PB._encoded_size(x::ClusterDef)
    encoded_size = 0
    !isempty(x.job) && (encoded_size += PB._encoded_size(x.job, 1))
    return encoded_size
end