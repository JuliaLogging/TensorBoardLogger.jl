# Autogenerated using ProtoBuf.jl v1.0.11 on 2023-08-09T10:18:17.786
# original file: proto/tensorboard/tensorboard/saver.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export var"SaverDef.CheckpointFormatVersion", SaverDef

@enumx var"SaverDef.CheckpointFormatVersion" LEGACY=0 V1=1 V2=2

struct SaverDef
    filename_tensor_name::String
    save_tensor_name::String
    restore_op_name::String
    max_to_keep::Int32
    sharded::Bool
    keep_checkpoint_every_n_hours::Float32
    version::var"SaverDef.CheckpointFormatVersion".T
end
PB.default_values(::Type{SaverDef}) = (;filename_tensor_name = "", save_tensor_name = "", restore_op_name = "", max_to_keep = zero(Int32), sharded = false, keep_checkpoint_every_n_hours = zero(Float32), version = var"SaverDef.CheckpointFormatVersion".LEGACY)
PB.field_numbers(::Type{SaverDef}) = (;filename_tensor_name = 1, save_tensor_name = 2, restore_op_name = 3, max_to_keep = 4, sharded = 5, keep_checkpoint_every_n_hours = 6, version = 7)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:SaverDef})
    filename_tensor_name = ""
    save_tensor_name = ""
    restore_op_name = ""
    max_to_keep = zero(Int32)
    sharded = false
    keep_checkpoint_every_n_hours = zero(Float32)
    version = var"SaverDef.CheckpointFormatVersion".LEGACY
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            filename_tensor_name = PB.decode(d, String)
        elseif field_number == 2
            save_tensor_name = PB.decode(d, String)
        elseif field_number == 3
            restore_op_name = PB.decode(d, String)
        elseif field_number == 4
            max_to_keep = PB.decode(d, Int32)
        elseif field_number == 5
            sharded = PB.decode(d, Bool)
        elseif field_number == 6
            keep_checkpoint_every_n_hours = PB.decode(d, Float32)
        elseif field_number == 7
            version = PB.decode(d, var"SaverDef.CheckpointFormatVersion".T)
        else
            PB.skip(d, wire_type)
        end
    end
    return SaverDef(filename_tensor_name, save_tensor_name, restore_op_name, max_to_keep, sharded, keep_checkpoint_every_n_hours, version)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::SaverDef)
    initpos = position(e.io)
    !isempty(x.filename_tensor_name) && PB.encode(e, 1, x.filename_tensor_name)
    !isempty(x.save_tensor_name) && PB.encode(e, 2, x.save_tensor_name)
    !isempty(x.restore_op_name) && PB.encode(e, 3, x.restore_op_name)
    x.max_to_keep != zero(Int32) && PB.encode(e, 4, x.max_to_keep)
    x.sharded != false && PB.encode(e, 5, x.sharded)
    x.keep_checkpoint_every_n_hours != zero(Float32) && PB.encode(e, 6, x.keep_checkpoint_every_n_hours)
    x.version != var"SaverDef.CheckpointFormatVersion".LEGACY && PB.encode(e, 7, x.version)
    return position(e.io) - initpos
end
function PB._encoded_size(x::SaverDef)
    encoded_size = 0
    !isempty(x.filename_tensor_name) && (encoded_size += PB._encoded_size(x.filename_tensor_name, 1))
    !isempty(x.save_tensor_name) && (encoded_size += PB._encoded_size(x.save_tensor_name, 2))
    !isempty(x.restore_op_name) && (encoded_size += PB._encoded_size(x.restore_op_name, 3))
    x.max_to_keep != zero(Int32) && (encoded_size += PB._encoded_size(x.max_to_keep, 4))
    x.sharded != false && (encoded_size += PB._encoded_size(x.sharded, 5))
    x.keep_checkpoint_every_n_hours != zero(Float32) && (encoded_size += PB._encoded_size(x.keep_checkpoint_every_n_hours, 6))
    x.version != var"SaverDef.CheckpointFormatVersion".LEGACY && (encoded_size += PB._encoded_size(x.version, 7))
    return encoded_size
end