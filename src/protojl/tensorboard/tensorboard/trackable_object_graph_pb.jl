# Autogenerated using ProtoBuf.jl v1.0.11 on 2023-08-09T10:18:18.202
# original file: proto/tensorboard/tensorboard/trackable_object_graph.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export var"TrackableObjectGraph.TrackableObject.ObjectReference"
export var"TrackableObjectGraph.TrackableObject.SerializedTensor"
export var"TrackableObjectGraph.TrackableObject.SlotVariableReference", RegisteredSaver
export var"TrackableObjectGraph.TrackableObject", TrackableObjectGraph

struct var"TrackableObjectGraph.TrackableObject.ObjectReference"
    node_id::Int32
    local_name::String
end
PB.default_values(::Type{var"TrackableObjectGraph.TrackableObject.ObjectReference"}) = (;node_id = zero(Int32), local_name = "")
PB.field_numbers(::Type{var"TrackableObjectGraph.TrackableObject.ObjectReference"}) = (;node_id = 1, local_name = 2)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:var"TrackableObjectGraph.TrackableObject.ObjectReference"})
    node_id = zero(Int32)
    local_name = ""
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            node_id = PB.decode(d, Int32)
        elseif field_number == 2
            local_name = PB.decode(d, String)
        else
            PB.skip(d, wire_type)
        end
    end
    return var"TrackableObjectGraph.TrackableObject.ObjectReference"(node_id, local_name)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::var"TrackableObjectGraph.TrackableObject.ObjectReference")
    initpos = position(e.io)
    x.node_id != zero(Int32) && PB.encode(e, 1, x.node_id)
    !isempty(x.local_name) && PB.encode(e, 2, x.local_name)
    return position(e.io) - initpos
end
function PB._encoded_size(x::var"TrackableObjectGraph.TrackableObject.ObjectReference")
    encoded_size = 0
    x.node_id != zero(Int32) && (encoded_size += PB._encoded_size(x.node_id, 1))
    !isempty(x.local_name) && (encoded_size += PB._encoded_size(x.local_name, 2))
    return encoded_size
end

struct var"TrackableObjectGraph.TrackableObject.SerializedTensor"
    name::String
    full_name::String
    checkpoint_key::String
end
PB.reserved_fields(::Type{var"TrackableObjectGraph.TrackableObject.SerializedTensor"}) = (names = ["optional_restore"], numbers = Union{Int,UnitRange{Int}}[4])
PB.default_values(::Type{var"TrackableObjectGraph.TrackableObject.SerializedTensor"}) = (;name = "", full_name = "", checkpoint_key = "")
PB.field_numbers(::Type{var"TrackableObjectGraph.TrackableObject.SerializedTensor"}) = (;name = 1, full_name = 2, checkpoint_key = 3)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:var"TrackableObjectGraph.TrackableObject.SerializedTensor"})
    name = ""
    full_name = ""
    checkpoint_key = ""
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            name = PB.decode(d, String)
        elseif field_number == 2
            full_name = PB.decode(d, String)
        elseif field_number == 3
            checkpoint_key = PB.decode(d, String)
        else
            PB.skip(d, wire_type)
        end
    end
    return var"TrackableObjectGraph.TrackableObject.SerializedTensor"(name, full_name, checkpoint_key)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::var"TrackableObjectGraph.TrackableObject.SerializedTensor")
    initpos = position(e.io)
    !isempty(x.name) && PB.encode(e, 1, x.name)
    !isempty(x.full_name) && PB.encode(e, 2, x.full_name)
    !isempty(x.checkpoint_key) && PB.encode(e, 3, x.checkpoint_key)
    return position(e.io) - initpos
end
function PB._encoded_size(x::var"TrackableObjectGraph.TrackableObject.SerializedTensor")
    encoded_size = 0
    !isempty(x.name) && (encoded_size += PB._encoded_size(x.name, 1))
    !isempty(x.full_name) && (encoded_size += PB._encoded_size(x.full_name, 2))
    !isempty(x.checkpoint_key) && (encoded_size += PB._encoded_size(x.checkpoint_key, 3))
    return encoded_size
end

struct var"TrackableObjectGraph.TrackableObject.SlotVariableReference"
    original_variable_node_id::Int32
    slot_name::String
    slot_variable_node_id::Int32
end
PB.default_values(::Type{var"TrackableObjectGraph.TrackableObject.SlotVariableReference"}) = (;original_variable_node_id = zero(Int32), slot_name = "", slot_variable_node_id = zero(Int32))
PB.field_numbers(::Type{var"TrackableObjectGraph.TrackableObject.SlotVariableReference"}) = (;original_variable_node_id = 1, slot_name = 2, slot_variable_node_id = 3)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:var"TrackableObjectGraph.TrackableObject.SlotVariableReference"})
    original_variable_node_id = zero(Int32)
    slot_name = ""
    slot_variable_node_id = zero(Int32)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            original_variable_node_id = PB.decode(d, Int32)
        elseif field_number == 2
            slot_name = PB.decode(d, String)
        elseif field_number == 3
            slot_variable_node_id = PB.decode(d, Int32)
        else
            PB.skip(d, wire_type)
        end
    end
    return var"TrackableObjectGraph.TrackableObject.SlotVariableReference"(original_variable_node_id, slot_name, slot_variable_node_id)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::var"TrackableObjectGraph.TrackableObject.SlotVariableReference")
    initpos = position(e.io)
    x.original_variable_node_id != zero(Int32) && PB.encode(e, 1, x.original_variable_node_id)
    !isempty(x.slot_name) && PB.encode(e, 2, x.slot_name)
    x.slot_variable_node_id != zero(Int32) && PB.encode(e, 3, x.slot_variable_node_id)
    return position(e.io) - initpos
end
function PB._encoded_size(x::var"TrackableObjectGraph.TrackableObject.SlotVariableReference")
    encoded_size = 0
    x.original_variable_node_id != zero(Int32) && (encoded_size += PB._encoded_size(x.original_variable_node_id, 1))
    !isempty(x.slot_name) && (encoded_size += PB._encoded_size(x.slot_name, 2))
    x.slot_variable_node_id != zero(Int32) && (encoded_size += PB._encoded_size(x.slot_variable_node_id, 3))
    return encoded_size
end

struct RegisteredSaver
    name::String
    object_name::String
end
PB.default_values(::Type{RegisteredSaver}) = (;name = "", object_name = "")
PB.field_numbers(::Type{RegisteredSaver}) = (;name = 1, object_name = 2)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:RegisteredSaver})
    name = ""
    object_name = ""
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            name = PB.decode(d, String)
        elseif field_number == 2
            object_name = PB.decode(d, String)
        else
            PB.skip(d, wire_type)
        end
    end
    return RegisteredSaver(name, object_name)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::RegisteredSaver)
    initpos = position(e.io)
    !isempty(x.name) && PB.encode(e, 1, x.name)
    !isempty(x.object_name) && PB.encode(e, 2, x.object_name)
    return position(e.io) - initpos
end
function PB._encoded_size(x::RegisteredSaver)
    encoded_size = 0
    !isempty(x.name) && (encoded_size += PB._encoded_size(x.name, 1))
    !isempty(x.object_name) && (encoded_size += PB._encoded_size(x.object_name, 2))
    return encoded_size
end

struct var"TrackableObjectGraph.TrackableObject"
    children::Vector{var"TrackableObjectGraph.TrackableObject.ObjectReference"}
    attributes::Vector{var"TrackableObjectGraph.TrackableObject.SerializedTensor"}
    slot_variables::Vector{var"TrackableObjectGraph.TrackableObject.SlotVariableReference"}
    registered_saver::Union{Nothing,RegisteredSaver}
    has_checkpoint_values::Union{Nothing,google.protobuf.BoolValue}
end
PB.default_values(::Type{var"TrackableObjectGraph.TrackableObject"}) = (;children = Vector{var"TrackableObjectGraph.TrackableObject.ObjectReference"}(), attributes = Vector{var"TrackableObjectGraph.TrackableObject.SerializedTensor"}(), slot_variables = Vector{var"TrackableObjectGraph.TrackableObject.SlotVariableReference"}(), registered_saver = nothing, has_checkpoint_values = nothing)
PB.field_numbers(::Type{var"TrackableObjectGraph.TrackableObject"}) = (;children = 1, attributes = 2, slot_variables = 3, registered_saver = 4, has_checkpoint_values = 5)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:var"TrackableObjectGraph.TrackableObject"})
    children = PB.BufferedVector{var"TrackableObjectGraph.TrackableObject.ObjectReference"}()
    attributes = PB.BufferedVector{var"TrackableObjectGraph.TrackableObject.SerializedTensor"}()
    slot_variables = PB.BufferedVector{var"TrackableObjectGraph.TrackableObject.SlotVariableReference"}()
    registered_saver = Ref{Union{Nothing,RegisteredSaver}}(nothing)
    has_checkpoint_values = Ref{Union{Nothing,google.protobuf.BoolValue}}(nothing)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, children)
        elseif field_number == 2
            PB.decode!(d, attributes)
        elseif field_number == 3
            PB.decode!(d, slot_variables)
        elseif field_number == 4
            PB.decode!(d, registered_saver)
        elseif field_number == 5
            PB.decode!(d, has_checkpoint_values)
        else
            PB.skip(d, wire_type)
        end
    end
    return var"TrackableObjectGraph.TrackableObject"(children[], attributes[], slot_variables[], registered_saver[], has_checkpoint_values[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::var"TrackableObjectGraph.TrackableObject")
    initpos = position(e.io)
    !isempty(x.children) && PB.encode(e, 1, x.children)
    !isempty(x.attributes) && PB.encode(e, 2, x.attributes)
    !isempty(x.slot_variables) && PB.encode(e, 3, x.slot_variables)
    !isnothing(x.registered_saver) && PB.encode(e, 4, x.registered_saver)
    !isnothing(x.has_checkpoint_values) && PB.encode(e, 5, x.has_checkpoint_values)
    return position(e.io) - initpos
end
function PB._encoded_size(x::var"TrackableObjectGraph.TrackableObject")
    encoded_size = 0
    !isempty(x.children) && (encoded_size += PB._encoded_size(x.children, 1))
    !isempty(x.attributes) && (encoded_size += PB._encoded_size(x.attributes, 2))
    !isempty(x.slot_variables) && (encoded_size += PB._encoded_size(x.slot_variables, 3))
    !isnothing(x.registered_saver) && (encoded_size += PB._encoded_size(x.registered_saver, 4))
    !isnothing(x.has_checkpoint_values) && (encoded_size += PB._encoded_size(x.has_checkpoint_values, 5))
    return encoded_size
end

struct TrackableObjectGraph
    nodes::Vector{var"TrackableObjectGraph.TrackableObject"}
end
PB.default_values(::Type{TrackableObjectGraph}) = (;nodes = Vector{var"TrackableObjectGraph.TrackableObject"}())
PB.field_numbers(::Type{TrackableObjectGraph}) = (;nodes = 1)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:TrackableObjectGraph})
    nodes = PB.BufferedVector{var"TrackableObjectGraph.TrackableObject"}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, nodes)
        else
            PB.skip(d, wire_type)
        end
    end
    return TrackableObjectGraph(nodes[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::TrackableObjectGraph)
    initpos = position(e.io)
    !isempty(x.nodes) && PB.encode(e, 1, x.nodes)
    return position(e.io) - initpos
end
function PB._encoded_size(x::TrackableObjectGraph)
    encoded_size = 0
    !isempty(x.nodes) && (encoded_size += PB._encoded_size(x.nodes, 1))
    return encoded_size
end