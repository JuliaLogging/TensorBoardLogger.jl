# Autogenerated using ProtoBuf.jl v1.0.11 on 2023-08-09T10:18:18.633
# original file: proto/tensorboard/tensorboard/graph.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export GraphDef

struct GraphDef
    node::Vector{NodeDef}
    versions::Union{Nothing,VersionDef}
    version::Int32
    library::Union{Nothing,FunctionDefLibrary}
    debug_info::Union{Nothing,GraphDebugInfo}
end
PB.default_values(::Type{GraphDef}) = (;node = Vector{NodeDef}(), versions = nothing, version = zero(Int32), library = nothing, debug_info = nothing)
PB.field_numbers(::Type{GraphDef}) = (;node = 1, versions = 4, version = 3, library = 2, debug_info = 5)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:GraphDef})
    node = PB.BufferedVector{NodeDef}()
    versions = Ref{Union{Nothing,VersionDef}}(nothing)
    version = zero(Int32)
    library = Ref{Union{Nothing,FunctionDefLibrary}}(nothing)
    debug_info = Ref{Union{Nothing,GraphDebugInfo}}(nothing)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, node)
        elseif field_number == 4
            PB.decode!(d, versions)
        elseif field_number == 3
            version = PB.decode(d, Int32)
        elseif field_number == 2
            PB.decode!(d, library)
        elseif field_number == 5
            PB.decode!(d, debug_info)
        else
            PB.skip(d, wire_type)
        end
    end
    return GraphDef(node[], versions[], version, library[], debug_info[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::GraphDef)
    initpos = position(e.io)
    !isempty(x.node) && PB.encode(e, 1, x.node)
    !isnothing(x.versions) && PB.encode(e, 4, x.versions)
    x.version != zero(Int32) && PB.encode(e, 3, x.version)
    !isnothing(x.library) && PB.encode(e, 2, x.library)
    !isnothing(x.debug_info) && PB.encode(e, 5, x.debug_info)
    return position(e.io) - initpos
end
function PB._encoded_size(x::GraphDef)
    encoded_size = 0
    !isempty(x.node) && (encoded_size += PB._encoded_size(x.node, 1))
    !isnothing(x.versions) && (encoded_size += PB._encoded_size(x.versions, 4))
    x.version != zero(Int32) && (encoded_size += PB._encoded_size(x.version, 3))
    !isnothing(x.library) && (encoded_size += PB._encoded_size(x.library, 2))
    !isnothing(x.debug_info) && (encoded_size += PB._encoded_size(x.debug_info, 5))
    return encoded_size
end