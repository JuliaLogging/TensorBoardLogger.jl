# Autogenerated using ProtoBuf.jl v1.0.11 on 2023-08-09T10:18:18.290
# original file: proto/tensorboard/tensorboard/versions.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export VersionDef

struct VersionDef
    producer::Int32
    min_consumer::Int32
    bad_consumers::Vector{Int32}
end
PB.default_values(::Type{VersionDef}) = (;producer = zero(Int32), min_consumer = zero(Int32), bad_consumers = Vector{Int32}())
PB.field_numbers(::Type{VersionDef}) = (;producer = 1, min_consumer = 2, bad_consumers = 3)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:VersionDef})
    producer = zero(Int32)
    min_consumer = zero(Int32)
    bad_consumers = PB.BufferedVector{Int32}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            producer = PB.decode(d, Int32)
        elseif field_number == 2
            min_consumer = PB.decode(d, Int32)
        elseif field_number == 3
            PB.decode!(d, wire_type, bad_consumers)
        else
            PB.skip(d, wire_type)
        end
    end
    return VersionDef(producer, min_consumer, bad_consumers[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::VersionDef)
    initpos = position(e.io)
    x.producer != zero(Int32) && PB.encode(e, 1, x.producer)
    x.min_consumer != zero(Int32) && PB.encode(e, 2, x.min_consumer)
    !isempty(x.bad_consumers) && PB.encode(e, 3, x.bad_consumers)
    return position(e.io) - initpos
end
function PB._encoded_size(x::VersionDef)
    encoded_size = 0
    x.producer != zero(Int32) && (encoded_size += PB._encoded_size(x.producer, 1))
    x.min_consumer != zero(Int32) && (encoded_size += PB._encoded_size(x.min_consumer, 2))
    !isempty(x.bad_consumers) && (encoded_size += PB._encoded_size(x.bad_consumers, 3))
    return encoded_size
end