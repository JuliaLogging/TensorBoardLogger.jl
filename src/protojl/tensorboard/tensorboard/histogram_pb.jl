# Autogenerated using ProtoBuf.jl v1.0.11 on 2023-08-09T10:18:18.246
# original file: proto/tensorboard/tensorboard/histogram.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export HistogramProto

struct HistogramProto
    min::Float64
    max::Float64
    num::Float64
    sum::Float64
    sum_squares::Float64
    bucket_limit::Vector{Float64}
    bucket::Vector{Float64}
end
PB.default_values(::Type{HistogramProto}) = (;min = zero(Float64), max = zero(Float64), num = zero(Float64), sum = zero(Float64), sum_squares = zero(Float64), bucket_limit = Vector{Float64}(), bucket = Vector{Float64}())
PB.field_numbers(::Type{HistogramProto}) = (;min = 1, max = 2, num = 3, sum = 4, sum_squares = 5, bucket_limit = 6, bucket = 7)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:HistogramProto})
    min = zero(Float64)
    max = zero(Float64)
    num = zero(Float64)
    sum = zero(Float64)
    sum_squares = zero(Float64)
    bucket_limit = PB.BufferedVector{Float64}()
    bucket = PB.BufferedVector{Float64}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            min = PB.decode(d, Float64)
        elseif field_number == 2
            max = PB.decode(d, Float64)
        elseif field_number == 3
            num = PB.decode(d, Float64)
        elseif field_number == 4
            sum = PB.decode(d, Float64)
        elseif field_number == 5
            sum_squares = PB.decode(d, Float64)
        elseif field_number == 6
            PB.decode!(d, wire_type, bucket_limit)
        elseif field_number == 7
            PB.decode!(d, wire_type, bucket)
        else
            PB.skip(d, wire_type)
        end
    end
    return HistogramProto(min, max, num, sum, sum_squares, bucket_limit[], bucket[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::HistogramProto)
    initpos = position(e.io)
    x.min != zero(Float64) && PB.encode(e, 1, x.min)
    x.max != zero(Float64) && PB.encode(e, 2, x.max)
    x.num != zero(Float64) && PB.encode(e, 3, x.num)
    x.sum != zero(Float64) && PB.encode(e, 4, x.sum)
    x.sum_squares != zero(Float64) && PB.encode(e, 5, x.sum_squares)
    !isempty(x.bucket_limit) && PB.encode(e, 6, x.bucket_limit)
    !isempty(x.bucket) && PB.encode(e, 7, x.bucket)
    return position(e.io) - initpos
end
function PB._encoded_size(x::HistogramProto)
    encoded_size = 0
    x.min != zero(Float64) && (encoded_size += PB._encoded_size(x.min, 1))
    x.max != zero(Float64) && (encoded_size += PB._encoded_size(x.max, 2))
    x.num != zero(Float64) && (encoded_size += PB._encoded_size(x.num, 3))
    x.sum != zero(Float64) && (encoded_size += PB._encoded_size(x.sum, 4))
    x.sum_squares != zero(Float64) && (encoded_size += PB._encoded_size(x.sum_squares, 5))
    !isempty(x.bucket_limit) && (encoded_size += PB._encoded_size(x.bucket_limit, 6))
    !isempty(x.bucket) && (encoded_size += PB._encoded_size(x.bucket, 7))
    return encoded_size
end